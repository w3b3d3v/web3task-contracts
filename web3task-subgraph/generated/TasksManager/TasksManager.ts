// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AuthorizeOperator extends ethereum.Event {
  get params(): AuthorizeOperator__Params {
    return new AuthorizeOperator__Params(this);
  }
}

export class AuthorizeOperator__Params {
  _event: AuthorizeOperator;

  constructor(event: AuthorizeOperator) {
    this._event = event;
  }

  get interfaceId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get roleId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isAuthorized(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AuthorizePersonnel extends ethereum.Event {
  get params(): AuthorizePersonnel__Params {
    return new AuthorizePersonnel__Params(this);
  }
}

export class AuthorizePersonnel__Params {
  _event: AuthorizePersonnel;

  constructor(event: AuthorizePersonnel) {
    this._event = event;
  }

  get roleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get authorizedAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isAuthorized(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get authorizationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get depositor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DescriptionUpdated extends ethereum.Event {
  get params(): DescriptionUpdated__Params {
    return new DescriptionUpdated__Params(this);
  }
}

export class DescriptionUpdated__Params {
  _event: DescriptionUpdated;

  constructor(event: DescriptionUpdated) {
    this._event = event;
  }

  get taskId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class EndDateUpdated extends ethereum.Event {
  get params(): EndDateUpdated__Params {
    return new EndDateUpdated__Params(this);
  }
}

export class EndDateUpdated__Params {
  _event: EndDateUpdated;

  constructor(event: EndDateUpdated) {
    this._event = event;
  }

  get taskId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MetadataUpdated extends ethereum.Event {
  get params(): MetadataUpdated__Params {
    return new MetadataUpdated__Params(this);
  }
}

export class MetadataUpdated__Params {
  _event: MetadataUpdated;

  constructor(event: MetadataUpdated) {
    this._event = event;
  }

  get taskId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get metadata(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class QuorumUpdated extends ethereum.Event {
  get params(): QuorumUpdated__Params {
    return new QuorumUpdated__Params(this);
  }
}

export class QuorumUpdated__Params {
  _event: QuorumUpdated;

  constructor(event: QuorumUpdated) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TaskCreated extends ethereum.Event {
  get params(): TaskCreated__Params {
    return new TaskCreated__Params(this);
  }
}

export class TaskCreated__Params {
  _event: TaskCreated;

  constructor(event: TaskCreated) {
    this._event = event;
  }

  get taskId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assignee(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TaskReviewed extends ethereum.Event {
  get params(): TaskReviewed__Params {
    return new TaskReviewed__Params(this);
  }
}

export class TaskReviewed__Params {
  _event: TaskReviewed;

  constructor(event: TaskReviewed) {
    this._event = event;
  }

  get taskId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reviewer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get metadata(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class TaskStarted extends ethereum.Event {
  get params(): TaskStarted__Params {
    return new TaskStarted__Params(this);
  }
}

export class TaskStarted__Params {
  _event: TaskStarted;

  constructor(event: TaskStarted) {
    this._event = event;
  }

  get taskId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assignee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TaskUpdated extends ethereum.Event {
  get params(): TaskUpdated__Params {
    return new TaskUpdated__Params(this);
  }
}

export class TaskUpdated__Params {
  _event: TaskUpdated;

  constructor(event: TaskUpdated) {
    this._event = event;
  }

  get taskId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class TitleUpdated extends ethereum.Event {
  get params(): TitleUpdated__Params {
    return new TitleUpdated__Params(this);
  }
}

export class TitleUpdated__Params {
  _event: TitleUpdated;

  constructor(event: TitleUpdated) {
    this._event = event;
  }

  get taskId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get title(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get authorizationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get withdrawer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TasksManager__createTaskInput_taskStruct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get title(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get reward(): BigInt {
    return this[3].toBigInt();
  }

  get endDate(): BigInt {
    return this[4].toBigInt();
  }

  get authorizedRoles(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get creatorRole(): BigInt {
    return this[6].toBigInt();
  }

  get assignee(): Address {
    return this[7].toAddress();
  }

  get metadata(): string {
    return this[8].toString();
  }
}

export class TasksManager__getTaskResultValue0Struct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get title(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get reward(): BigInt {
    return this[3].toBigInt();
  }

  get endDate(): BigInt {
    return this[4].toBigInt();
  }

  get authorizedRoles(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get creatorRole(): BigInt {
    return this[6].toBigInt();
  }

  get assignee(): Address {
    return this[7].toAddress();
  }

  get metadata(): string {
    return this[8].toString();
  }
}

export class TasksManager extends ethereum.SmartContract {
  static bind(address: Address): TasksManager {
    return new TasksManager("TasksManager", address);
  }

  APPROVALS(): BigInt {
    let result = super.call("APPROVALS", "APPROVALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_APPROVALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("APPROVALS", "APPROVALS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelTask(_taskId: BigInt, _roleId: BigInt): boolean {
    let result = super.call(
      "cancelTask",
      "cancelTask(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_taskId),
        ethereum.Value.fromUnsignedBigInt(_roleId)
      ]
    );

    return result[0].toBoolean();
  }

  try_cancelTask(
    _taskId: BigInt,
    _roleId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelTask",
      "cancelTask(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_taskId),
        ethereum.Value.fromUnsignedBigInt(_roleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  completeTask(_taskId: BigInt, _roleId: BigInt): boolean {
    let result = super.call(
      "completeTask",
      "completeTask(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_taskId),
        ethereum.Value.fromUnsignedBigInt(_roleId)
      ]
    );

    return result[0].toBoolean();
  }

  try_completeTask(
    _taskId: BigInt,
    _roleId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "completeTask",
      "completeTask(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_taskId),
        ethereum.Value.fromUnsignedBigInt(_roleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createTask(_task: TasksManager__createTaskInput_taskStruct): BigInt {
    let result = super.call(
      "createTask",
      "createTask((uint8,string,string,uint256,uint256,uint256[],uint256,address,string)):(uint256)",
      [ethereum.Value.fromTuple(_task)]
    );

    return result[0].toBigInt();
  }

  try_createTask(
    _task: TasksManager__createTaskInput_taskStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createTask",
      "createTask((uint8,string,string,uint256,uint256,uint256[],uint256,address,string)):(uint256)",
      [ethereum.Value.fromTuple(_task)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBalance(_roleId: BigInt): BigInt {
    let result = super.call("getBalance", "getBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_roleId)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(_roleId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_roleId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTask(_taskId: BigInt): TasksManager__getTaskResultValue0Struct {
    let result = super.call(
      "getTask",
      "getTask(uint256):((uint8,string,string,uint256,uint256,uint256[],uint256,address,string))",
      [ethereum.Value.fromUnsignedBigInt(_taskId)]
    );

    return changetype<TasksManager__getTaskResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTask(
    _taskId: BigInt
  ): ethereum.CallResult<TasksManager__getTaskResultValue0Struct> {
    let result = super.tryCall(
      "getTask",
      "getTask(uint256):((uint8,string,string,uint256,uint256,uint256[],uint256,address,string))",
      [ethereum.Value.fromUnsignedBigInt(_taskId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TasksManager__getTaskResultValue0Struct>(value[0].toTuple())
    );
  }

  getUserTasks(_address: Address): Array<BigInt> {
    let result = super.call(
      "getUserTasks",
      "getUserTasks(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserTasks(_address: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserTasks",
      "getUserTasks(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  hasRole(_roleId: BigInt, _address: Address): boolean {
    let result = super.call("hasRole", "hasRole(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_roleId),
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(
    _roleId: BigInt,
    _address: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_roleId),
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperator(_interfaceId: Bytes, _roleId: BigInt): boolean {
    let result = super.call("isOperator", "isOperator(bytes4,uint256):(bool)", [
      ethereum.Value.fromFixedBytes(_interfaceId),
      ethereum.Value.fromUnsignedBigInt(_roleId)
    ]);

    return result[0].toBoolean();
  }

  try_isOperator(
    _interfaceId: Bytes,
    _roleId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOperator",
      "isOperator(bytes4,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_interfaceId),
        ethereum.Value.fromUnsignedBigInt(_roleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  multicallRead(data: Array<Bytes>): Array<Bytes> {
    let result = super.call(
      "multicallRead",
      "multicallRead(bytes[]):(bytes[])",
      [ethereum.Value.fromBytesArray(data)]
    );

    return result[0].toBytesArray();
  }

  try_multicallRead(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "multicallRead",
      "multicallRead(bytes[]):(bytes[])",
      [ethereum.Value.fromBytesArray(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reviewTask(_taskId: BigInt, _roleId: BigInt, _metadata: string): boolean {
    let result = super.call(
      "reviewTask",
      "reviewTask(uint256,uint256,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_taskId),
        ethereum.Value.fromUnsignedBigInt(_roleId),
        ethereum.Value.fromString(_metadata)
      ]
    );

    return result[0].toBoolean();
  }

  try_reviewTask(
    _taskId: BigInt,
    _roleId: BigInt,
    _metadata: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "reviewTask",
      "reviewTask(uint256,uint256,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_taskId),
        ethereum.Value.fromUnsignedBigInt(_roleId),
        ethereum.Value.fromString(_metadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  startTask(_taskId: BigInt, _roleId: BigInt): boolean {
    let result = super.call("startTask", "startTask(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_taskId),
      ethereum.Value.fromUnsignedBigInt(_roleId)
    ]);

    return result[0].toBoolean();
  }

  try_startTask(
    _taskId: BigInt,
    _roleId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "startTask",
      "startTask(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_taskId),
        ethereum.Value.fromUnsignedBigInt(_roleId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  taskId(): BigInt {
    let result = super.call("taskId", "taskId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_taskId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("taskId", "taskId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdraw(_roleId: BigInt, _amount: BigInt): boolean {
    let result = super.call("withdraw", "withdraw(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_roleId),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_withdraw(_roleId: BigInt, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_roleId),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CancelTaskCall extends ethereum.Call {
  get inputs(): CancelTaskCall__Inputs {
    return new CancelTaskCall__Inputs(this);
  }

  get outputs(): CancelTaskCall__Outputs {
    return new CancelTaskCall__Outputs(this);
  }
}

export class CancelTaskCall__Inputs {
  _call: CancelTaskCall;

  constructor(call: CancelTaskCall) {
    this._call = call;
  }

  get _taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roleId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelTaskCall__Outputs {
  _call: CancelTaskCall;

  constructor(call: CancelTaskCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CompleteTaskCall extends ethereum.Call {
  get inputs(): CompleteTaskCall__Inputs {
    return new CompleteTaskCall__Inputs(this);
  }

  get outputs(): CompleteTaskCall__Outputs {
    return new CompleteTaskCall__Outputs(this);
  }
}

export class CompleteTaskCall__Inputs {
  _call: CompleteTaskCall;

  constructor(call: CompleteTaskCall) {
    this._call = call;
  }

  get _taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roleId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CompleteTaskCall__Outputs {
  _call: CompleteTaskCall;

  constructor(call: CompleteTaskCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateTaskCall extends ethereum.Call {
  get inputs(): CreateTaskCall__Inputs {
    return new CreateTaskCall__Inputs(this);
  }

  get outputs(): CreateTaskCall__Outputs {
    return new CreateTaskCall__Outputs(this);
  }
}

export class CreateTaskCall__Inputs {
  _call: CreateTaskCall;

  constructor(call: CreateTaskCall) {
    this._call = call;
  }

  get _task(): CreateTaskCall_taskStruct {
    return changetype<CreateTaskCall_taskStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateTaskCall__Outputs {
  _call: CreateTaskCall;

  constructor(call: CreateTaskCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateTaskCall_taskStruct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get title(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get reward(): BigInt {
    return this[3].toBigInt();
  }

  get endDate(): BigInt {
    return this[4].toBigInt();
  }

  get authorizedRoles(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get creatorRole(): BigInt {
    return this[6].toBigInt();
  }

  get assignee(): Address {
    return this[7].toAddress();
  }

  get metadata(): string {
    return this[8].toString();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _roleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EmergengyWithdrawCall extends ethereum.Call {
  get inputs(): EmergengyWithdrawCall__Inputs {
    return new EmergengyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergengyWithdrawCall__Outputs {
    return new EmergengyWithdrawCall__Outputs(this);
  }
}

export class EmergengyWithdrawCall__Inputs {
  _call: EmergengyWithdrawCall;

  constructor(call: EmergengyWithdrawCall) {
    this._call = call;
  }
}

export class EmergengyWithdrawCall__Outputs {
  _call: EmergengyWithdrawCall;

  constructor(call: EmergengyWithdrawCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class ReviewTaskCall extends ethereum.Call {
  get inputs(): ReviewTaskCall__Inputs {
    return new ReviewTaskCall__Inputs(this);
  }

  get outputs(): ReviewTaskCall__Outputs {
    return new ReviewTaskCall__Outputs(this);
  }
}

export class ReviewTaskCall__Inputs {
  _call: ReviewTaskCall;

  constructor(call: ReviewTaskCall) {
    this._call = call;
  }

  get _taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roleId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _metadata(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ReviewTaskCall__Outputs {
  _call: ReviewTaskCall;

  constructor(call: ReviewTaskCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetDescriptionCall extends ethereum.Call {
  get inputs(): SetDescriptionCall__Inputs {
    return new SetDescriptionCall__Inputs(this);
  }

  get outputs(): SetDescriptionCall__Outputs {
    return new SetDescriptionCall__Outputs(this);
  }
}

export class SetDescriptionCall__Inputs {
  _call: SetDescriptionCall;

  constructor(call: SetDescriptionCall) {
    this._call = call;
  }

  get _taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetDescriptionCall__Outputs {
  _call: SetDescriptionCall;

  constructor(call: SetDescriptionCall) {
    this._call = call;
  }
}

export class SetEndDateCall extends ethereum.Call {
  get inputs(): SetEndDateCall__Inputs {
    return new SetEndDateCall__Inputs(this);
  }

  get outputs(): SetEndDateCall__Outputs {
    return new SetEndDateCall__Outputs(this);
  }
}

export class SetEndDateCall__Inputs {
  _call: SetEndDateCall;

  constructor(call: SetEndDateCall) {
    this._call = call;
  }

  get _taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _endDate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetEndDateCall__Outputs {
  _call: SetEndDateCall;

  constructor(call: SetEndDateCall) {
    this._call = call;
  }
}

export class SetMetadataCall extends ethereum.Call {
  get inputs(): SetMetadataCall__Inputs {
    return new SetMetadataCall__Inputs(this);
  }

  get outputs(): SetMetadataCall__Outputs {
    return new SetMetadataCall__Outputs(this);
  }
}

export class SetMetadataCall__Inputs {
  _call: SetMetadataCall;

  constructor(call: SetMetadataCall) {
    this._call = call;
  }

  get _taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _metadata(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetMetadataCall__Outputs {
  _call: SetMetadataCall;

  constructor(call: SetMetadataCall) {
    this._call = call;
  }
}

export class SetMinQuorumCall extends ethereum.Call {
  get inputs(): SetMinQuorumCall__Inputs {
    return new SetMinQuorumCall__Inputs(this);
  }

  get outputs(): SetMinQuorumCall__Outputs {
    return new SetMinQuorumCall__Outputs(this);
  }
}

export class SetMinQuorumCall__Inputs {
  _call: SetMinQuorumCall;

  constructor(call: SetMinQuorumCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinQuorumCall__Outputs {
  _call: SetMinQuorumCall;

  constructor(call: SetMinQuorumCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _interfaceId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _roleId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _isAuthorized(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetRoleCall extends ethereum.Call {
  get inputs(): SetRoleCall__Inputs {
    return new SetRoleCall__Inputs(this);
  }

  get outputs(): SetRoleCall__Outputs {
    return new SetRoleCall__Outputs(this);
  }
}

export class SetRoleCall__Inputs {
  _call: SetRoleCall;

  constructor(call: SetRoleCall) {
    this._call = call;
  }

  get _roleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _authorizedAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _isAuthorized(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetRoleCall__Outputs {
  _call: SetRoleCall;

  constructor(call: SetRoleCall) {
    this._call = call;
  }
}

export class SetTitleCall extends ethereum.Call {
  get inputs(): SetTitleCall__Inputs {
    return new SetTitleCall__Inputs(this);
  }

  get outputs(): SetTitleCall__Outputs {
    return new SetTitleCall__Outputs(this);
  }
}

export class SetTitleCall__Inputs {
  _call: SetTitleCall;

  constructor(call: SetTitleCall) {
    this._call = call;
  }

  get _taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _title(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTitleCall__Outputs {
  _call: SetTitleCall;

  constructor(call: SetTitleCall) {
    this._call = call;
  }
}

export class StartTaskCall extends ethereum.Call {
  get inputs(): StartTaskCall__Inputs {
    return new StartTaskCall__Inputs(this);
  }

  get outputs(): StartTaskCall__Outputs {
    return new StartTaskCall__Outputs(this);
  }
}

export class StartTaskCall__Inputs {
  _call: StartTaskCall;

  constructor(call: StartTaskCall) {
    this._call = call;
  }

  get _taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roleId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StartTaskCall__Outputs {
  _call: StartTaskCall;

  constructor(call: StartTaskCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _roleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
